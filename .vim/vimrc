"----- options -----
" set leader key as space
let mapleader=" "

" ----- vim-plug -----
call plug#begin()
" undotree
Plug 'mbbill/undotree'

" vim-easy-align - align text in multiple lines
Plug 'junegunn/vim-easy-align'

" vim-repeat - repeat action provided by plugins
Plug 'tpope/vim-repeat'

" vim-surround - surround text by brackets, braces, tags, etc
Plug 'tpope/vim-surround'

" vim-commentary - commenting text
Plug 'tpope/vim-commentary'

" vim-unimpaired - handle bracket mappings
Plug 'tpope/vim-unimpaired'

" vim-speeddating - increment and decrement date and time
Plug 'tpope/vim-speeddating'

" vim-tags - maintain tags file
Plug 'szw/vim-tags'

" vim-signature
Plug 'kshenoy/vim-signature'

" context.vim
Plug 'wellle/context.vim'

" auto-pairs
Plug 'jiangmiao/auto-pairs'

" vim-lsp and vim-lsp-settings
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'

" ultisnips
Plug 'SirVer/ultisnips'
" vim-snippets - snippets
Plug 'honza/vim-snippets'

" vim-closetag - autoclose html, xml, react tags
Plug 'alvan/vim-closetag'

" vim-fugitive - git interface
Plug 'tpope/vim-fugitive'

" vim-lf
Plug 'thezeroalpha/vim-lf'

" vim-dadbod - database interface
Plug 'tpope/vim-dadbod'

" vim-rest-console - to handle curl for REST api test
Plug 'diepm/vim-rest-console'

" vim-http - send raw http requests
Plug 'nicwest/vim-http'

" vim-js-indent
" Plug 'jason0x43/vim-js-indent'

" vim-jsx-pretty
" Plug 'maxmellon/vim-jsx-pretty'

" vim-fzf
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

call plug#end()

" ----- netrw
" disable banner
let g:netrw_banner = 0
" change file listing style
let g:netrw_liststyle = 3
" hide hiddenfiles
let g:netrw_hide = 1
" pattern for hidden files
let g:netrw_list_hide = '\(^\|\s\s\)\zs\.\S\+'
" copy directory command
let g:netrw_localcopydircmd = 'cp -r'
" set split window size always equal
let g:netrw_winsize = 0
" preview files
let g:netrw_preview = 0

" disable list
autocmd FileType netrw set nolist

" keymaps
nnoremap _ee :Lexplore %:p:h<CR>
nnoremap _ea :Lexplore<CR>

function! NetrwMapping()
  " navigation
  " go up a directory
  nmap <buffer> H -^
  " go down a directory
  nmap <buffer> L <CR>

  " toggle hidden files
  nmap <buffer> . gh
  " close preview window
  nmap <buffer> P <C-w>z


  " marks
  " mark file
  nmap <buffer> <TAB> mf
  " unmark file
  nmap <buffer> <S-TAB> mF
  " unmark all
  nmap <buffer> <Leader><TAB> mu

  " file management
  " just create file and stay in netrw
  nmap <buffer> ff %:w<CR>:buffer #<CR>
  " rename file
  nmap <buffer> fr R
  " copy marked file
  nmap <buffer> fc mc
  " mark target and copy marked file in one step
  nmap <buffer> fC mtmc
  " move marked file
  nmap <buffer> fx mm
  " mark target and move marked file in one step
  nmap <buffer> fX mtmm
  " run external command on mared file
  nmap <buffer> f: mx

  " list mared file
  nmap <buffer> fl :echo join(netrw#Expose("netrwmarkfilelist"), "\n")<CR>
  " show target directory
  nmap <buffer> fd :echo 'Target:' . netrw#Expose("netrwmftgt")<CR>
  " mark and show target directory
  nmap <buffer> ft mtft

  " bookmarks
  " create
  nmap <buffer> bb mb
  " remove 
  nmap <buffer> bd mB
  " goto boomark
  nmap <buffer> b- gb
  " list
  nmap <buffer> bl qb
  " goto predecessor directory
  nmap <buffer> bu u
  " goto successor directory
  nmap <buffer> bU U

  " remove directory whith content inside
  " nmap <buffer> FD :call NetrwRemoveRecursive()<CR>
endfunction

augroup netrw_mapping
  autocmd!
  autocmd filetype netrw call NetrwMapping()
augroup END

" ----- undotree
if has("persistent_undo")
  let target_path = expand('~/.vim/undodir')

  " create the directory and any parent directories
  " if the location does not exist.
  if !isdirectory(target_path)
    call mkdir(target_path, "p", 0700)
  endif

  let &undodir=target_path
  set undofile
endif

nnoremap <Leader>u :UndotreeToggle<CR>

" ----- vim-easy-align
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap <Leader>ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap <Leader>ga <Plug>(EasyAlign)

" ----- vim-tags
set exrc
set secure

" generate tags file
nnoremap <Leader>gt :TagsGenerate!<CR>

" Vim-Tags will generate tags on file saving
let g:vim_tags_auto_generate = 1

" ctags binary
let g:vim_tags_ctags_binary = "/usr/bin/ctags"

" the main tags file name
let g:vim_tags_main_file = 'tags'

" the directory for cache files
let g:vim_tags_extension = expand($XDG_CACHE_HOME)

" ----- ultisnips
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsListSnippets = "<c-tab>"
let g:UltiSnipsJumpForwardTrigger = "<c-n>"
let g:UltiSnipsJumpBackwardTrigger = "<c-p>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

inoremap <c-x><c-k> <c-x><c-k>

" ----- vim-jsx-pretty
let g:vim_jsx_pretty_highlight_close_tag = 1

autocmd BufNewFile, BufRead *.jsx set filetype=javascriptreact
autocmd BufNewFile, BufRead *.tsx set filetype=typescriptreact

" ----- vim-autoclose
" filenames like *.xml, *.html, *.xhtml, ...
" These are the file extensions where this plugin is enabled.
"
let g:closetag_filenames = '*.html,*.xhtml,*.phtml'

" filenames like *.xml, *.xhtml, ...
" This will make the list of non-closing tags self-closing in the specified files.
"
let g:closetag_xhtml_filenames = '*.xhtml,*.jsx'

" filetypes like xml, html, xhtml, ...
" These are the file types where this plugin is enabled.
"
let g:closetag_filetypes = 'html,xhtml,phtml'

" filetypes like xml, xhtml, ...
" This will make the list of non-closing tags self-closing in the specified files.
"
let g:closetag_xhtml_filetypes = 'xhtml,jsx'

" integer value [0|1]
" This will make the list of non-closing tags case-sensitive (e.g. `<Link>` will be closed while `<link>` won't.)
"
let g:closetag_emptyTags_caseSensitive = 1

" dict
" Disables auto-close if not in a "valid" region (based on filetype)
"
let g:closetag_regions = {
    \ 'typescript.tsx': 'jsxRegion,tsxRegion',
    \ 'javascript.jsx': 'jsxRegion',
    \ 'typescriptreact': 'jsxRegion,tsxRegion',
    \ 'javascriptreact': 'jsxRegion',
    \ }

" Shortcut for closing tags, default is '>'
"
let g:closetag_shortcut = '>'

" Add > at current position without closing the current tag, default is ''
"
let g:closetag_close_shortcut = '<leader>>'

" ----- vim-lf
nnoremap <leader>lfw <Plug>LfEdit
nnoremap <leader>lfs <Plug>LfSplit

" ----- vim-lsp, vim-lsp-settings
" autoclose preview window
let g:lsp_preview_autoclose = 1
" Opens preview windows as floating
let g:lsp_preview_float = 1
autocmd BufEnter * call lsp#disable_diagnostics_for_buffer()

" enable and disable lsp
nnoremap <Leader>lsp :call lsp#enable()
nnoremap <Leader>lSp :call lsp#disable()


function! OnLspBufferEnabled() abort
  setlocal omnifunc=lsp#complete
  setlocal signcolumn=yes

  nmap <buffer> <Leader>gd <plug>(lsp-declaration)
  nmap <buffer> <Leader>gD <plug>(lsp-definition)
  nmap <buffer> <Leader>lr <plug>(lsp-references)
  nmap <buffer> <Leader>li <plug>(lsp-implementation)
  nmap <buffer> <Leader>lt <plug>(lsp-type-definition)
  nmap <buffer> <Leader>lR <plug>(lsp-rename)
  nmap <buffer> <Leader>ld <plug>(lsp-document-diagnostics)
  nmap <buffer> <Leader>lp <plug>(lsp-previous-diagnostic)
  nmap <buffer> <Leader>ln <plug>(lsp-next-diagnostic)
  nmap <buffer> <Leader>ls <plug>(lsp-document-symbol-search)
  nmap <buffer> <Leader>lS <plug>(lsp-workspace-symbol-search)
  nmap <buffer> <Leader>K <plug>(lsp-hover)
  nnoremap <buffer> <expr><c-f> lsp#scroll(+4)
  nnoremap <buffer> <expr><c-b> lsp#scroll(-4)
endfunction

augroup lsp_install
  au!
  autocmd User lsp_buffer_enabled call OnLspBufferEnabled()
augroup END

if executable('clangd')
  " pip install python-lsp-server
  au User lsp_setup call lsp#register_server({
        \ 'name': 'clangd',
        \ 'cmd': {server_info->['clangd']},
        \ 'allowlist': ['c', 'cpp'],
        \ })
endif

" ----- vim-fzf
" use grep as Rg
command! -bang -nargs=* Grep
  \ call fzf#vim#grep(
  \   'grep -n -- '.fzf#shellescape(<q-args>),
  \   fzf#vim#with_preview(), <bang>0)

" git grep wrapper
command! -bang -nargs=* GGrep
  \ call fzf#vim#grep(
  \   'git grep --line-number -- '.fzf#shellescape(<q-args>),
  \   fzf#vim#with_preview({'dir': systemlist('git rev-parse --show-toplevel')[0]}), <bang>0)


function! PInsert2(item)
  let @z=a:item
  norm "zp
  call feedkeys('a')
endfunction

function! CompleteInf()
  let nl=[]
  let l=complete_info()
  for k in l['items']
    call add(nl, k['word']. ' : ' .k['info'] . ' '. k['menu'] )
  endfor
  if l['mode'] == 'whole_line'
    let l:prefix = '^\s*\zs.*$'
  else
    let l:prefix = '\k*$' " default
  endif
  call fzf#vim#complete(fzf#wrap({'prefix': prefix, 'source': nl, 'reducer': { lines -> split(lines[0], '\zs :')[0] }, 'sink':function('PInsert2')}))
endfunction

imap <c-f> <CMD>:call CompleteInf()<CR>

" ----- options -----
" generate helptags for all files in rtp
helptags ALL

" set cursor shape as pipe(|) when insert mode and block when normal mode
" t_SI - start insert mode (bar cursor shape)
" t_SR - start replace mode (underline cursor shape)
" t_EI - end insert or replace mode (block cursor shape)
let &t_SI = "\e[6 q"
let &t_SR = "\e[4 q"
let &t_EI = "\e[2 q"

" no compatible to vi
set nocompatible

" set encofing to utf-8
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1

" fileformats to use
set fileformats=unix,dos

" set color of terminal
set t_Co=256

" set theme
set background=dark

" filetype, syntax on
syntax on
filetype plugin indent on

" automatc re-read opened file
set autoread

" set hiddent buffers
set hidden

" set title
set title
set titlestring=%F

" backspace behavior on whitespace characer
set backspace=start,eol,indent

" set linenumbers 
set number
set relativenumber

" set correct indation
set tabstop=8
set softtabstop=4
set shiftwidth=4
set smartindent
set expandtab
set smarttab

set autoindent

" search and highlight
set magic
set incsearch
set ignorecase
set smartcase
set nohlsearch

" show matching bracket
set showmatch
set matchtime=2

" enable folds
set foldenable
set foldmarker=\ {{{,\ }}}
set foldmethod=manual

" keep cursor in the middle of window
set scrolloff=999

" set viminfo options
set viminfo='50,<1000,s100,n~/.vim/viminfo

" show whitespace characters
set list
set listchars=
" below tab='> '
set listchars+=tab:>\\x20
set listchars+=trail:~
set listchars+=extends:>
set listchars+=precedes:<
"set listchars+=space:\\u00B7
"set listchars+=leadmultispace:\\u00B7\\u00B7\\u00B7\|

" set path for finding
set path=.,**

" backup files
" set backup
set writebackup
set swapfile

set backupdir=~/.vim/backup/,.
set directory=~/.vim/backup/,.

" ignore files when autocompleting path in command mode
set wildmenu
set wildmode=list:full
set wildignore+=**/node_modules/**,**/.git/**

" timeout on keycode and mappings
set ttimeout
set ttimeoutlen=10

" indicate that the terminal is fast
set ttyfast

" screen update time
set updatetime=10

" wrap lines after certain length
set wrap
set linebreak
set textwidth=80
" set colorcolumn at 81st character
"set colorcolumn=81
highlight ColorColumn term=NONE ctermbg=224 ctermfg=black guibg=LightRed
call matchadd('ColorColumn', '\%81v', 100)

" set cursorline
set cursorline
highlight CursorLine term=NONE cterm=NONE ctermbg=237
highlight CursorLineNr cterm=bold ctermbg=237


" show tabline
set showtabline=1

" show command, selection
set showcmd
set cmdheight=2

" completion popup options
set completeopt=menuone,noinsert,noselect,preview

" set shortmessage
set shortmess=
" show abbreviated text about information like lines, modifies, etc
set shortmess+=a
set shortmess+=t
set shortmess+=T
set shortmess+=o
set shortmess+=O
" don't give intro message when starting vim
set shortmess+=I

" Transparent editing of gpg encrypted files.
" By Wouter Hanegraaff
augroup encrypted
  autocmd!
  " First make sure nothing is written to ~/.viminfo while editing
  " an encrypted file.
  autocmd BufReadPre,FileReadPre *.gpg set viminfo=
  " We don't want a swap file, as it writes unencrypted data to disk
  autocmd BufReadPre,FileReadPre *.gpg set noswapfile

  " Switch to binary mode to read the encrypted file
  autocmd BufReadPre,FileReadPre *.gpg set binary
  autocmd BufReadPre,FileReadPre *.gpg let ch_save = &cmdheight|set cmdheight=2
  " (If you use tcsh, you may need to alter this line.)
  autocmd BufReadPost,FileReadPost *.gpg '[,']!gpg --decrypt 2> /dev/null

  " Switch to normal mode for editing
  autocmd BufReadPost,FileReadPost *.gpg set nobinary
  autocmd BufReadPost,FileReadPost *.gpg let &cmdheight = ch_save|unlet ch_save
  autocmd BufReadPost,FileReadPost *.gpg execute ":doautocmd BufReadPost " . expand("%:r")

  " Convert all text to encrypted text before writing
  " (If you use tcsh, you may need to alter this line.)
  autocmd BufWritePre,FileWritePre *.gpg '[,']!gpg --default-recipient-self -ae 2>/dev/null
  " Undo the encryption so we are back in the normal text, directly
  " after the file has been written.
  autocmd BufWritePost,FileWritePost *.gpg u
augroup END

" editing binary file
" vim -b : edit binary using xxd-format!
augroup Binary
  autocmd!
  autocmd BufReadPre  *.bin set binary
  autocmd BufReadPost *.bin
        \ if &binary
        \ |   execute "silent %!xxd -c 32"
        \ |   set filetype=xxd
        \ |   redraw
        \ | endif
  autocmd BufWritePre *.bin
        \ if &binary
        \ |   let s:view = winsaveview()
        \ |   execute "silent %!xxd -r -c 32"
        \ | endif
  autocmd BufWritePost *.bin
        \ if &binary
        \ |   execute "silent %!xxd -c 32"
        \ |   set nomodified
        \ |   call winrestview(s:view)
        \ |   redraw
        \ | endif
augroup END


" ----- mappings -----
" edit and source vimrc
nnoremap <Leader>ve :split $MYVIMRC<CR>
nnoremap <Leader>vs :source $MYVIMRC<CR>

" source current script
nnoremap <Bslash><Bslash> :write<CR>:source<CR>

" pipe commands from buffer to program without overwrite result to buffer
" no <CR> at the end so that i can specify which program the input goes to
xnoremap <Leader>x :w !bash

" clipboard
xnoremap <Leader>p "_dP
nnoremap <Leader>y "+y
xnoremap <Leader>y "+y
xnoremap <Leader>Y "+Y

nnoremap <Leader>d "_d
xnoremap <Leader>d "_d

" substiture word under cursor
nnoremap <Leader>s :%s/\<<C-r><C-w>\>/<C-r><C-w>/gI<Left><Left><Left>

" turn off highlight of search
nnoremap <Leader>\ :set hlsearch!<CR><C-l>

"" move block of text above and below
xnoremap - :m '<-2<CR>gv
xnoremap + :m '>+1<CR>gv

map <F5> :setlocal spell! spelllang=en<CR>

" ----- statusline -----
set noruler
if &ruler == 1
  set laststatus=0
  set statusline=
  set ruler
  set rulerformat=
  set rulerformat+=%45(%(%q%)\ %n\ %(%m%y%H%w%)%)
  set rulerformat+=%=
  set rulerformat+=%L,\%c,col:%v\ --%p%%--
elseif &ruler == 0
  set laststatus=2
  set statusline=%(%q%f%)\ [%n]%y%(%w%h%r%)%m
  set statusline+=%=
  set statusline+=%L,\%c,col:%v\ --%p%%--
endif
